{"version":3,"sources":["topologicalSorting/FormInput.jsx","topologicalSorting/Network.js","graphAlgoVisualizer/node/node.jsx","graphAlgoVisualizer/navbar.jsx","algorithms/dijkstra.js","algorithms/aStar.js","algorithms/bfs.js","algorithms/dfs.js","graphAlgoVisualizer/graphAlgoVisualizer.jsx","minimumSpanningTree/canvas.jsx","minimumSpanningTree/minimumSpanningTree.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","React","Component","constructor","props","super","tempdata","value1","value2","value3","value4","value1prereq","value2prereq","value3prereq","value4prereq","temptaskCounter","tempgraph","nodes","edges","tempanswer","this","state","data","taskCounter","graph","answer","open","createNetwork","bind","handlebuttonclick","topologicalSort","hasCycle","hasCycleUtil","computeInDegree","generateFormInput","visualizeNetwork","handleChange","handleSubmit","resetForm","i","formmanage","children","hidden","setState","e","preventDefault","target","disabled","parentElement","adjMap","inDegreeMap","Map","node","list","has","set","neighbour","get","visited","recStack","I","c","length","Array","q","key","value","push","curr","shift","neighbours","toString","Object","values","at","toLowerCase","trim","split","filter","str","dataSet","edgesArr","id","label","from","to","width","DataSet","event","eval","name","messagesEnd","scrollIntoView","behavior","console","log","render","createElement","Fragment","className","style","backgroundColor","title","Button","onClick","Collapse","in","onSubmit","ref","em","type","placeholder","onChange","el","Network","VisNetwork","domNode","useRef","network","options","autoResize","locale","clickToUse","arrows","enabled","color","highlight","background","border","shape","font","useEffect","current","Node","arguments","getClassName","isStart","isEnd","isWall","weight","visitedNode","pathNode","row","column","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","Checkbox","assign","classNavbar","currentAlgo","addWeights","forDijkstra","handleDescription","forAstar","forBFS","forDFS","visualize","handleDijkstra","handleAstar","handleBFS","handleDFS","handleCheckboxChange","handleClearAlgorithm","handleClearGrid","timeComplexity","pathLength","pathCost","Navbar","variant","expand","sticky","Brand","Toggle","Nav","NavDropdown","Item","checked","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbours","grid","unvisitedNeighbours","isVisited","getUnvisitedNeighbours","ite","previousNode","sortNodesByValueF","currentNode","targetNode","distanceBetweenCurrentAndTarget","Math","abs","g_currentNode","g_ite","h_ite","pushNeighboursOfCurrentNode","queue","currNode","neighboursOfCurrentNode","toReturn","getNeighboursOfCurrentNode","pushNeighboursOfNode","stack","neighboursOfNode","getNeighboursOfNode","startNode_Row","startNode_Col","endNode_Row","endNode_Col","GraphAlgoVisualizer","isMousePressed","isMovingStart","isMovingEnd","processActive","description","getNewGridWithWallToggled","newGrid","slice","newNode","getNewGridWithWeights","changeInValue","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","animateAlgo","visitedNodesInOrder","shortestPath","document","getElementById","j","setTimeout","visualizeDijkstra","clearAlgo","startNode","endNode","visitedNodeInOrder","columns","getAllNodes","nearestNode","Infinity","dijkstra","previous","reverse","getShortestPathDijkstra","shortestPathCost","weightOfPath","getWeightOfShortestPathDijkstra","visualizeAstar","rows","nextNode","aStar","getShortestPathAstar","getWeightOfShortestPathAstar","visualizeBFS","bfs","path","getPathBFS","getWeightOfShortestPathBFS","visualizeDFS","pop","dfs","getPathDFS","getWeightOfPathDFS","undoAlgoAndWalls","getDescription","algo","componentDidMount","currentRow","map","rowIdx","nodeIdx","Canvas","coord","minimumCost","newCanvas","ctx","canvas","getContext","draw","setCost","cost","prims","unvisited","unvisited1","total","first","splice","minEdge","parent","currentVertex","calWeight","round","totalCount","drawPrims","x1","y1","x2","y2","x","pow","y","sqrt","outline","window","innerWidth","height","innerHeight","display","fontSize","position","right","xypair","clientX","clientY","newCoord","onContextMenu","coordX","coordY","MinimumSpanningTree","ChildElement","createRef","strokeRect","rect","getBoundingClientRect","clearRect","fillStyle","beginPath","arc","left","top","PI","fill","data1","source","destination","strokeStyle","moveTo","lineTo","stroke","strokeText","Header","justify","defaultActiveKey","Link","href","eventKey","Footer","rel","App","Router","Switch","Route","exact","element","TopologicalSorting","Boolean","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7767a87a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button,Collapse } from \"react-bootstrap\";\r\nimport { DataSet } from \"vis-data\";\r\nimport \"./form.css\"\r\nimport Network from './Network';\r\n\r\n\r\nclass FormInput extends React.Component {\r\n  tempdata= {\r\n    value1: '', value2: '', value3: '', value4: '',\r\n    value1prereq: '', value2prereq: '', value3prereq: '', value4prereq: ''\r\n  };\r\n  temptaskCounter= 1;\r\n  tempgraph= {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n  tempanswer= '';\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: {\r\n        value1: '', value2: '', value3: '', value4: '',\r\n        value1prereq: '', value2prereq: '', value3prereq: '', value4prereq: ''\r\n      }\r\n      , taskCounter: 1\r\n      , graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      answer: '',\r\n      open:false\r\n    };\r\n    this.createNetwork = this.createNetwork.bind(this);\r\n    this.handlebuttonclick = this.handlebuttonclick.bind(this);\r\n    this.topologicalSort = this.topologicalSort.bind(this);\r\n    this.hasCycle = this.hasCycle.bind(this);\r\n    this.hasCycleUtil = this.hasCycle.bind(this);\r\n    this.computeInDegree = this.computeInDegree.bind(this);\r\n    this.generateFormInput = this.generateFormInput.bind(this);\r\n    this.visualizeNetwork = this.visualizeNetwork.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.resetForm = this.resetForm.bind(this);\r\n  }\r\n  \r\n  resetForm() {\r\n    this.temptaskCounter=1;\r\n    for (let i = 1; i < 4; i++) {\r\n      this.formmanage.children[i].hidden = true;\r\n\r\n    }\r\n  }\r\n  handlebuttonclick()\r\n  {\r\n    this.setState({open:!this.state.open});\r\n  }\r\n  generateFormInput(e) {\r\n    e.preventDefault();\r\n    this.temptaskCounter+=1;\r\n    if (this.temptaskCounter === 4) {\r\n      e.target.disabled = true;\r\n    }\r\n    e.target.parentElement.children[this.temptaskCounter - 1].hidden = false;\r\n  }\r\n  computeInDegree(adjMap) {\r\n    let inDegreeMap = new Map();\r\n    for (let [node, list] of adjMap) {\r\n      if (!inDegreeMap.has(node)) {\r\n        inDegreeMap.set(node, 0);\r\n      }\r\n      for (let neighbour of list) {\r\n        if (inDegreeMap.has(neighbour)) {\r\n          inDegreeMap.set(neighbour, inDegreeMap.get(neighbour) + 1);\r\n        } else {\r\n          inDegreeMap.set(neighbour, 1);\r\n        }\r\n      }\r\n    }\r\n    return inDegreeMap;\r\n  }\r\n\r\n  hasCycleUtil(i, visited, recStack, adjMap, I) {\r\n    // Mark the current node as visited and\r\n    // part of recursion stack\r\n    if (recStack[i])\r\n      return true;\r\n\r\n    if (visited[i])\r\n      return false;\r\n\r\n    visited[i] = true;\r\n\r\n    recStack[i] = true;\r\n    let children = adjMap[i];\r\n\r\n    for (let c = 0; c < children.length; c++)\r\n      if (this.hasCycleUtil(children, visited, recStack, adjMap))\r\n        return true;\r\n\r\n    recStack[i] = false;\r\n\r\n    return false;\r\n  }\r\n\r\n  hasCycle(adjMap) {\r\n    let visited = new Array(this.temptaskCounter);\r\n    let recStack = new Array(this.temptaskCounter);\r\n    for (let i = 0; i < this.temptaskCounter; i++) {\r\n      visited[i] = false;\r\n      recStack[i] = false;\r\n    }\r\n\r\n    for (let i = 0; i < this.temptaskCounter; i++)\r\n      if (this.hasCycleUtil(i, visited, recStack, adjMap, i % 2))\r\n        return true;\r\n\r\n    return false;\r\n  }\r\n  topologicalSort(adjMap, inDegreeMap) {\r\n    // if(this.hasCycle(adjMap)){\r\n    //   console.log(\"reached\");\r\n    //   alert('Submitted Can\\'t Sort - Given Graph contains cycle');\r\n    // }\r\n    let q = [];\r\n    for (let [key, value] of inDegreeMap) {\r\n      if (value === 0) {\r\n        q.push(key);\r\n      }\r\n    }\r\n    let answer = [];\r\n    while (q.length) {\r\n      let curr = q.shift();\r\n      answer.push(curr);\r\n      let neighbours = adjMap.get(curr);\r\n      for (let i = 0; i < neighbours.length; ++i) {\r\n        inDegreeMap.set(neighbours[i], inDegreeMap.get(neighbours[i]) - 1);\r\n        if (inDegreeMap.get(neighbours[i]) === 0) {\r\n          q.push(neighbours[i]);\r\n        }\r\n      }\r\n    }\r\n    if (answer.length < this.temptaskCounter) {\r\n\r\n      this.tempanswer=\"Topological Sort is not possible since given graph has cycle\";\r\n    }\r\n    else {\r\n       this.tempanswer=\"Order Of Execution = \" + answer.toString();\r\n    }\r\n  }\r\n  visualizeNetwork() {\r\n    const data = this.tempdata;\r\n    let adjMap = new Map();\r\n    for (let i = 0; i < this.temptaskCounter; i++) {\r\n      let key = Object.values(data).at(i).toLowerCase().trim();\r\n      if (!key) {\r\n        continue;\r\n      }\r\n      let values = Object.values(data).at(i + 4).split(',');\r\n      values = values.filter(str => str.trim().length > 0);\r\n      for (let i = 0; i < values.length; ++i) {\r\n        values[i] = values[i].toLowerCase().trim();\r\n        if (!adjMap.has(values[i])) {\r\n          adjMap.set(values[i], [key]);\r\n        } else {\r\n          adjMap.get(values[i]).push(key);\r\n        }\r\n      }\r\n\r\n      if (key && !adjMap.has(key)) {\r\n        adjMap.set(key, []);\r\n      }\r\n    }\r\n    this.createNetwork(adjMap);\r\n    this.topologicalSort(adjMap, this.computeInDegree(adjMap));\r\n\r\n  }\r\n  createNetwork(adjMap){\r\n    let dataSet = [];\r\n    let edgesArr = [];\r\n    for(let [key,values] of adjMap){\r\n      dataSet.push({id: key, label: key});\r\n      for(let i = 0 ; i < values.length ; ++i){\r\n        edgesArr.push({from: key, to: values[i], width: 1});\r\n      }\r\n    }\r\n    let network = new DataSet(dataSet);\r\n    let edges = new DataSet(edgesArr);\r\n    let data = {\r\n      nodes: network,\r\n      edges: edges\r\n    };\r\n    this.tempgraph=data;\r\n  }\r\n\r\n  handleChange(event) {\r\n    eval('this.tempdata.' + event.target.name + '=\"' + event.target.value + '\";');\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (this.temptaskCounter >= 1 && this.tempdata.value1 !== \"\") {\r\n      event.target.parentElement.children[4].hidden = false;\r\n    }\r\n\r\n    this.visualizeNetwork();\r\n    this.setState({\r\n      data: this.tempdata\r\n      , taskCounter: this.temptaskCounter\r\n      , graph: this.tempgraph,\r\n      answer: this.tempanswer,\r\n    })\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    console.log(this.state.answer);\r\n    // this.resetForm();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\" pt-2 pb-2 text-light container-float\" style={{backgroundColor: \"#262626\"}}>\r\n          <div className=\"navbar-brand ml-4 \">\r\n              Topological Sorting\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"topological-helper\" className=\"mt-2\" >\r\n          <p className=\"lead\">Task Scheduling can be done via <em>Topological Sorting</em>.</p>\r\n          <p className=\"text-muted\">Topological Sorting is applicable only on <abbr title=\"Directed Acyclic Graphs\">DAGs</abbr>.</p>\r\n          <p className=\"text-muted\">Here we are visualizing <em>Topological Sorting</em> by <b>Kahn's Algorithm</b> using List of tasks below</p>\r\n        \r\n           <Button className=\"btn m-2\" onClick={this.handlebuttonclick}>\r\n               Topological Sorting\r\n           </Button>\r\n\r\n           <Collapse in={this.state.open} className=\"m-4\">\r\n               <blockquote>\r\n               <p>In computer science, a topological sort or topological ordering of a directed graph is\r\n                         a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u\r\n                        comes before v in the ordering.\r\n                        For instance, the vertices of the graph may represent tasks to be performed,\r\n                         and the edges may represent constraints that one task must be performed before\r\n                         another; in this application, a topological ordering is just a valid sequence\r\n                         for the tasks. A topological ordering is possible if and only if the graph has\r\n                         no directed cycles, that is, if it is a directed acyclic graph (DAG)\r\n                       </p>\r\n               </blockquote>\r\n           </Collapse>\r\n        </div>\r\n        \r\n\r\n          <div className=\"m-2\">\r\n            <b>Enter Tasks Data:</b>\r\n          </div>\r\n\r\n          <form onSubmit={this.handleSubmit} ref={(em) => { this.formmanage = em; }}>\r\n\r\n            <div>\r\n              <input type=\"text\" name=\"value1\" placeholder=\"Task 1\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value1prereq\"placeholder=\"Task1 - Prerequisite\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value2\"placeholder=\"Task 2\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value2prereq\" placeholder=\"Task2 - Prerequisite\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value3\" placeholder=\"Task 3\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value3prereq\" placeholder=\"Task3 - Prerequisite\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div> \r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value4\" placeholder=\"Task 4\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value4prereq\"placeholder=\"Task4 - Prerequisite\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n            <input type=\"button\" value=\"Add More\" onClick={this.generateFormInput} className=\"mt-2 ml-2 mr-1 button\" />\r\n            <input type=\"submit\" value=\"Visualize\" className=\"mt-2 mr-2 ml-1 button\" />\r\n\r\n          </form>\r\n          <div className=\"result\" hidden={false} ref={(el) => { this.messagesEnd = el; }} >\r\n            {this.state.answer}\r\n\r\n          </div>\r\n          <div className=\"vis-react m-1\" >\r\n            <Network value1={this.state.graph} />\r\n          </div>\r\n\r\n        </>\r\n        );\r\n  }\r\n}\r\nexport default FormInput;","import React, { useEffect, useRef } from \"react\";\r\nimport { Network } from \"vis-network/standalone/esm/vis-network\";\r\n\r\nconst VisNetwork = (props) => {\r\n  const domNode = useRef(null);\r\n\r\n  const network = useRef(null);\r\n\r\n  const options = {\r\n    autoResize: true,\r\n    locale: \"en\",\r\n    clickToUse: false,\r\n    edges: {\r\n      arrows: {\r\n        to: {\r\n          enabled: true,\r\n        },\r\n      },\r\n      color: {\r\n        color: \"#1168d9\",\r\n        highlight: \"#051d38\",\r\n      },\r\n    },\r\n    nodes: {\r\n      color: {\r\n        background: \"#1e2431\",\r\n        border: \"#1e2431\",\r\n        highlight: {\r\n          background: \"#1e2431\",\r\n          border: \"#1e2431\",\r\n        },\r\n      },\r\n      shape: \"circle\",\r\n      font: {\r\n        color: \"#cfddef\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    network.current = new Network(domNode.current, props.value1, options);\r\n  }, [domNode, network, props.value1, options]);\r\n\r\n  return <div className=\"mainDiv\" ref={domNode} />;\r\n};\r\n\r\nexport default VisNetwork;\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n  getClassName = () => {\r\n    let str = \"node\";\r\n    if (this.props.isStart === true) {\r\n      str = str + \" startNode\";\r\n    } else if (this.props.isEnd === true) {\r\n      str = str + \" endNode\";\r\n    } else if (this.props.isWall === true) {\r\n      str = str + \" wall-true\";\r\n    } else if (this.props.weight > 0) {\r\n      str = str + \" weight-present\";\r\n    }\r\n    if (this.props.visitedNode === true){\r\n      str = str + \" node-visited\";\r\n    }\r\n    if (this.props.pathNode === true){\r\n      str = str + \" node-shortestPath\";\r\n    }\r\n    if (this.props.pathNode === true && this.props.weight > 0){\r\n      str = \"node weight-present-path\";\r\n    }\r\n    else if (this.props.visitedNode === true && this.props.weight > 0){\r\n      str = \"node weight-present-visited\";\r\n    }\r\n    return str; \r\n  };\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      // isStart,\r\n      // isEnd,\r\n      // distance,\r\n      // isVisited,\r\n      // previousNode,\r\n      // isWall,\r\n      // weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n    } = this.props;\r\n    //console.log(  this.props);\r\n    return (\r\n      <div\r\n        className={this.getClassName()}\r\n        id={`node-${row}-${column}`}\r\n        onMouseDown={() => onMouseDown(row, column)}\r\n        onMouseEnter={() => onMouseEnter(row, column)}\r\n        onMouseUp={() => onMouseUp(row, column)}\r\n        onMouseLeave={() => onMouseLeave(row,column)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./graphAlgoVisualizer.css\";\r\n\r\nconst Checkbox = (props) => <input type=\"checkbox\" {...props} />;\r\n\r\nclass classNavbar extends Component {\r\n  state = {\r\n    currentAlgo: \"Choose Algorithm\",\r\n    addWeights: \"false\",\r\n  };\r\n  forDijkstra = () => {\r\n    this.setState({ currentAlgo: \"Dijkstra\" });\r\n    this.props.handleDescription(\"Dijkstra\");\r\n  };\r\n  forAstar = () => {\r\n    this.setState({ currentAlgo: \"A* Search\" });\r\n    this.props.handleDescription(\"Astar\");\r\n  };\r\n  forBFS = () => {\r\n    this.setState({ currentAlgo: \"Breadth First Search\" });\r\n    this.props.handleDescription(\"BFS\");\r\n  };\r\n  forDFS = () => {\r\n    this.setState({ currentAlgo: \"Depth First Search\" });\r\n    this.props.handleDescription(\"DFS\");\r\n  };\r\n  visualize = () => {\r\n    if (this.state.currentAlgo === \"Dijkstra\") {\r\n      this.props.handleDijkstra();\r\n    } else if (this.state.currentAlgo === \"A* Search\") {\r\n      this.props.handleAstar();\r\n    } else if (this.state.currentAlgo === \"Breadth First Search\") {\r\n      this.props.handleBFS();\r\n    } else if (this.state.currentAlgo === \"Depth First Search\") {\r\n      this.props.handleDFS();\r\n    }\r\n  };\r\n  handleCheckboxChange = () => {\r\n    console.log(this.state.addWeights);\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n  };\r\n  render() {\r\n    const {\r\n      handleClearAlgorithm,\r\n      handleClearGrid,\r\n      addWeights,\r\n      handleCheckboxChange,\r\n      timeComplexity,\r\n      pathLength,\r\n      pathCost,\r\n    } = this.props;\r\n    return (\r\n      <Navbar variant=\"dark\" expand=\"lg\" sticky=\"top\" style={{backgroundColor: \"#262626\"}}>\r\n        <Navbar.Brand className=\"mr-4\">Path Finding Visualizer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <NavDropdown title={this.state.currentAlgo} id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={this.forDijkstra}>\r\n                Dijkstra\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forAstar}>\r\n                A* Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forBFS}>\r\n                Breadth First Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forDFS}>\r\n                Depth First Search\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <Button\r\n              variant=\"success\"\r\n              className=\"mx-4\"\r\n              onClick={this.visualize}\r\n              id=\"visualize\"\r\n            >\r\n              Visualize!\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-4\"\r\n              id=\"clearAlgo\"\r\n              onClick={handleClearAlgorithm}\r\n            >\r\n              Clear Algorithm\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-4\"\r\n              onClick={handleClearGrid}\r\n              id=\"clearGrid\"\r\n            >\r\n              Clear Grid\r\n            </Button>\r\n            <label className=\"mx-3\">\r\n              <Checkbox checked={addWeights} onChange={handleCheckboxChange} />\r\n              <span className=\"checkBox\">Switch to Weights</span>\r\n            </label>\r\n            <label className=\"checkBox mx-3\">Path Length : {pathLength}</label>\r\n            <label className=\"checkBox mx-3\">Path Cost : {pathCost}</label>\r\n            <label className=\"checkBox mx-3\">Time Complexity : {timeComplexity}</label>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default classNavbar;\r\n","export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodeInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  // console.log(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const nearestNode = unvisitedNodes.shift();\r\n    nearestNode.isVisited = true;\r\n    if (nearestNode.distance === Infinity) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    if (nearestNode.isWall === true) {\r\n      continue;\r\n    }\r\n    // nearestNode.isVisited = true;\r\n    visitedNodeInOrder.push(nearestNode);\r\n    if (nearestNode === endNode) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nearestNode, grid);\r\n    // console.log(visitedNodeInOrder);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let ite of unvisitedNeighbours) {\r\n    if (ite.distance > node.distance + ite.weight) {\r\n      ite.distance = node.distance + ite.weight + 1;\r\n      ite.previousNode = node;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = node;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let columns of row) {\r\n      nodes.push(columns);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPathDijkstra(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathDijkstra(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","//here distance is f in a* algo\r\n//f=g+h\r\nexport function aStar(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance =\r\n    Math.abs(startNode.row - endNode.row) +\r\n    Math.abs(startNode.column - endNode.column);\r\n  // startNode.distance=0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByValueF(unvisitedNodes);\r\n    const nextNode = unvisitedNodes.shift();\r\n    if (nextNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nextNode.isWall) {\r\n      continue;\r\n    }\r\n    nextNode.isVisited = true;\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nextNode, endNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByValueF(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const toReturn = [];\r\n  for (let rows of grid) {\r\n    for (let columns of rows) {\r\n      toReturn.push(columns);\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n  const distanceBetweenCurrentAndTarget =\r\n    Math.abs(currentNode.row - targetNode.row) +\r\n    Math.abs(currentNode.column - targetNode.column);\r\n  const g_currentNode = currentNode.distance - distanceBetweenCurrentAndTarget;\r\n  for (let ite of unvisitedNeighbours) {\r\n    let g_ite = g_currentNode + ite.weight + 1;\r\n    let h_ite =\r\n      Math.abs(ite.row - targetNode.row) +\r\n      Math.abs(ite.column - targetNode.column);\r\n    if (ite.distance > g_ite + h_ite) {\r\n      ite.distance = g_ite + h_ite;\r\n      ite.previousNode = currentNode;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\n// function updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n//   const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n//   const distanceBetweenCurrentAndTarget =\r\n//     currentNode.distance -\r\n//     (Math.abs(currentNode.row - targetNode.row) +\r\n//       Math.abs(currentNode.column - targetNode.column));\r\n//   // const distanceBetweenCurrentAndTarget = currentNode.distance;\r\n//   for (let ite of unvisitedNeighbours) {\r\n//     if (\r\n//       ite.distance >\r\n//       distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column)\r\n//     ) {\r\n//       ite.distance =\r\n//         distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column);\r\n//       ite.previousNode = currentNode;\r\n//     }\r\n//   }\r\n//   return unvisitedNeighbours;\r\n// }\r\n\r\nfunction getUnvisitedNeighbours(currentNode, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = currentNode;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getShortestPathAstar(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathAstar(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function bfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisited = true;\r\n  //    const unvisitedNodes=extractAllNodes(grid);\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  while (!!queue.length) {\r\n    const currNode = queue.shift();\r\n    if (currNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (currNode.isWall) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(currNode);\r\n    pushNeighboursOfCurrentNode(grid, queue, currNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfCurrentNode(grid, queue, currNode) {\r\n  const neighboursOfCurrentNode = getNeighboursOfCurrentNode(grid, currNode);\r\n  for (let node of neighboursOfCurrentNode) {\r\n    node.isVisited = true;\r\n    node.previousNode = currNode;\r\n    queue.push(node);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfCurrentNode(grid, currNode) {\r\n  const toReturn = [];\r\n  const row = currNode.row;\r\n  const column = currNode.column;\r\n\r\n  if (row - 1 >= 0 && !grid[row - 1][column].isVisited)\r\n    toReturn.push(grid[row - 1][column]);\r\n\r\n  if (column - 1 >= 0 && !grid[row][column - 1].isVisited)\r\n    toReturn.push(grid[row][column - 1]);\r\n\r\n  if (row + 1 < grid.length && !grid[row + 1][column].isVisited)\r\n    toReturn.push(grid[row + 1][column]);\r\n\r\n  if (column + 1 < grid[0].length && !grid[row][column + 1].isVisited)\r\n    toReturn.push(grid[row][column + 1]);\r\n\r\n  return toReturn;\r\n}\r\n\r\n// function extractAllNodes(grid){\r\n//     const toReturn=[];\r\n//     for (let row of grid){\r\n//         for (let column of row){\r\n//             toReturn.push(column);\r\n//         }\r\n//     }\r\n//     return toReturn;\r\n// }\r\n\r\nexport function getPathBFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfShortestPathBFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function dfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  while (!!stack.length) {\r\n    const nextNode = stack.pop();\r\n    if (nextNode.isWall === true) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    pushNeighboursOfNode(grid, stack, nextNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfNode(grid, stack, node) {\r\n  const neighboursOfNode = getNeighboursOfNode(grid, node);\r\n  for (let ite of neighboursOfNode) {\r\n    if (ite.previousNode===null){\r\n      ite.previousNode = node;\r\n    }\r\n    ite.isVisited = true;\r\n    stack.push(ite);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfNode(grid, node) {\r\n  const unvisitedNeighbours = [];\r\n  const row = node.row;\r\n  const column = node.column;\r\n\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n  }\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n  }\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n  }\r\n  if (\r\n    column + 1 < grid[0].length &&\r\n    grid[row][column + 1].isVisited === false\r\n  ) {\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n  }\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getPathDFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfPathDFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\nimport Navbar from \"./navbar\";\r\nimport \"./graphAlgoVisualizer.css\";\r\nimport {\r\n  dijkstra,\r\n  getShortestPathDijkstra,\r\n  getWeightOfShortestPathDijkstra,\r\n} from \"../algorithms/dijkstra.js\";\r\nimport {\r\n  aStar,\r\n  getShortestPathAstar,\r\n  getWeightOfShortestPathAstar,\r\n} from \"../algorithms/aStar.js\";\r\nimport {\r\n  bfs,\r\n  getPathBFS,\r\n  getWeightOfShortestPathBFS,\r\n} from \"../algorithms/bfs.js\";\r\nimport { dfs, getPathDFS, getWeightOfPathDFS } from \"../algorithms/dfs\";\r\nimport \"./node/node.css\";\r\n\r\nconst total_rows = 18;\r\nconst total_columns = 45;\r\nvar startNode_Row = 5;\r\nvar startNode_Col = 10;\r\nvar endNode_Row = 10;\r\nvar endNode_Col = 37;\r\nconst FixedWeight = 10;\r\n\r\nclass GraphAlgoVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    isMousePressed: false,\r\n    timeComplexity: 0,\r\n    pathCost: 0,\r\n    pathLength: 0,\r\n    isMovingStart: false,\r\n    isMovingEnd: false,\r\n    addWeights: false,\r\n    processActive: false,\r\n    description: \"Selecting the Nodes in the grid creates Obstacles/Weights. To switch from Obstacles to Weight and vice versa, use the checkbox at Navbar and select an Algorithm\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = [];\r\n    for (let row = 0; row < total_rows; row++) {\r\n      const currentRow = [];\r\n      for (let column = 0; column < total_columns; column++) {\r\n        const currentNode = {\r\n          row,\r\n          column,\r\n          isStart: row === startNode_Row && column === startNode_Col,\r\n          isEnd: row === endNode_Row && column === endNode_Col,\r\n          distance: Infinity,\r\n          weight: 0,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          isWall: false,\r\n          visitedNode: false,\r\n          pathNode: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  getNewGridWithWallToggled = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      weight: 0,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithWeights = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    let changeInValue = 0;\r\n    if (node.weight === 0) {\r\n      changeInValue = FixedWeight;\r\n    } else {\r\n      changeInValue = -FixedWeight;\r\n    }\r\n    const newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      weight: node.weight + changeInValue,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  handleMouseDown = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid, isMousePressed: true });\r\n    }\r\n    // if user wants to change positon of start or end node\r\n    else {\r\n      this.setState({ isMousePressed: true });\r\n      if (row === startNode_Row && column === startNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isStart: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingStart: true });\r\n      } else if (row === endNode_Row && column === endNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isEnd: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingEnd: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, column) => {\r\n    //Mouse entering a node with no click\r\n    if (!this.state.isMousePressed && !this.state.processActive) {\r\n      if (\r\n        !(\r\n          (row === startNode_Row && column === startNode_Col) ||\r\n          (row === endNode_Row && column === endNode_Col)\r\n        )\r\n      ) {\r\n        let newGrid;\r\n        if (!this.state.addWeights) {\r\n          newGrid = this.getNewGridWithWallToggled(row, column);\r\n        } else {\r\n          newGrid = this.getNewGridWithWeights(row, column);\r\n        }\r\n        this.setState({ grid: newGrid });\r\n      } else {\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.state.isMovingStart){\r\n      const newGrid=this.state.grid;\r\n      newGrid[startNode_Row][startNode_Col].isStart=false;\r\n      newGrid[row][column].isStart=true;\r\n      startNode_Row=row;\r\n      startNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    else if (this.state.isMovingEnd){\r\n      const newGrid=this.state.grid;\r\n      newGrid[endNode_Row][endNode_Col].isEnd=false;\r\n      newGrid[row][column].isEnd=true;\r\n      endNode_Row=row;\r\n      endNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (\r\n      this.state.isMousePressed &&\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  handleMouseUp = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    this.setState({ isMousePressed: false });\r\n\r\n    //if moving start or end\r\n    if (this.state.isMovingStart === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isStart: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingStart: false });\r\n      startNode_Row = row;\r\n      startNode_Col = column;\r\n    } else if (this.state.isMovingEnd === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isEnd: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingEnd: false });\r\n      endNode_Row = row;\r\n      endNode_Col = column;\r\n    }\r\n  };\r\n\r\n  handleMouseLeave = (row, column) => {\r\n    if (!this.state.isMousePressed && !this.state.processActive) {\r\n      if (\r\n        !(\r\n          (row === startNode_Row && column === startNode_Col) ||\r\n          (row === endNode_Row && column === endNode_Col)\r\n        )\r\n      ) {\r\n        let newGrid;\r\n        if (!this.state.addWeights) {\r\n          newGrid = this.getNewGridWithWallToggled(row, column);\r\n        } else {\r\n          newGrid = this.getNewGridWithWeights(row, column);\r\n        }\r\n        this.setState({ grid: newGrid });\r\n      } else {\r\n      }\r\n      return;\r\n    }\r\n  };\r\n\r\n  animateAlgo = (visitedNodesInOrder, shortestPath) => {\r\n    this.setState({ processActive: true });\r\n    document.getElementById(\"visualize\").disabled = true;\r\n    document.getElementById(\"clearAlgo\").disabled = true;\r\n    document.getElementById(\"clearGrid\").disabled = true;\r\n    const newGrid = this.state.grid.slice();\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        for (let j = 0; j < shortestPath.length; j++) {\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n              const newGridNode = newGrid[node.row][node.column];\r\n              const newNode = {\r\n                ...newGridNode,\r\n                pathNode: true,\r\n              };\r\n              newGrid[node.row][node.column] = newNode;\r\n              if (\r\n                document.getElementById(`node-${node.row}-${node.column}`)\r\n                  .className === \"node weight-present-visited\"\r\n              ) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node weight-present-path\";\r\n              } else {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node node-shortestPath\";\r\n              }\r\n            }, 50 * j);\r\n          }, 25 * i);\r\n        }\r\n        // Finally the solution to bug\r\n        setTimeout(() => {\r\n          setTimeout(() => {\r\n            this.setState({ processActive: false });\r\n            document.getElementById(\"visualize\").disabled = false;\r\n            document.getElementById(\"clearAlgo\").disabled = false;\r\n            document.getElementById(\"clearGrid\").disabled = false;\r\n            this.setState({ grid: newGrid});\r\n          }, 50 * shortestPath.length);\r\n        }, 25 * visitedNodesInOrder.length);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n              const newGridNode = newGrid[node.row][node.column];\r\n              const newNode = {\r\n                ...newGridNode,\r\n                visitedNode: true,\r\n              };\r\n              newGrid[node.row][node.column] = newNode;\r\n        if (\r\n          document.getElementById(`node-${node.row}-${node.column}`)\r\n            .className === \"node weight-present\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node weight-present-visited\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 25 * i);\r\n    }\r\n  };\r\n\r\n  visualizeDijkstra = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\r\n    const shortestPath = getShortestPathDijkstra(grid, startNode, endNode);\r\n    const shortestPathCost = getWeightOfShortestPathDijkstra(\r\n      grid,\r\n      shortestPath\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n  };\r\n\r\n  visualizeAstar = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = aStar(grid, startNode, endNode);\r\n    const shortestPath = getShortestPathAstar(grid, startNode, endNode);\r\n    const shortestPathCost = getWeightOfShortestPathAstar(grid, shortestPath);\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\r\n    const path = getPathBFS(grid, startNode, endNode);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfShortestPathBFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n  };\r\n\r\n  visualizeDFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\r\n    const path = getPathDFS(grid, startNode, endNode);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfPathDFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n  };\r\n\r\n  //clear visitedNodes and shortestPath properties from the grid leaving walls and weights untouched\r\n  clearAlgo = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        newGrid[row][column].visitedNode = false;\r\n        newGrid[row][column].pathNode = false;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col) ||\r\n            newGrid[row][column].isWall === true\r\n          )\r\n        ) {\r\n          if (newGrid[row][column].weight > 0) {\r\n            document.getElementById(`node-${row}-${column}`).className =\r\n              \"node weight-present\";\r\n          } else {\r\n            document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  //clear whole grid\r\n  undoAlgoAndWalls = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        newGrid[row][column].isWall = false;\r\n        newGrid[row][column].weight = 0;\r\n        newGrid[row][column].visitedNode = false;\r\n        newGrid[row][column].pathNode = false;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  handleCheckboxChange = () => {\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n  };\r\n\r\n  getDescription=(algo)=>{\r\n    if (algo===\"Dijkstra\"){\r\n      this.setState({description:\"Dijkstra's Algorithm is Weighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"Astar\"){\r\n      this.setState({description:\"A* Search (AI based Algorithm) is Weighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"BFS\"){\r\n      this.setState({description:\"Breath-first Search is Unweighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"DFS\"){\r\n      this.setState({description:\"Depth-first Search is Unweighted and does not guarantee the Shortest path!\"});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          addWeights={this.state.addWeights}\r\n          handleDijkstra={this.visualizeDijkstra}\r\n          handleAstar={this.visualizeAstar}\r\n          handleBFS={this.visualizeBFS}\r\n          handleDFS={this.visualizeDFS}\r\n          handleClearAlgorithm={this.clearAlgo}\r\n          handleClearGrid={this.undoAlgoAndWalls}\r\n          handleCheckboxChange={this.handleCheckboxChange}\r\n          processActive={this.state.processActive}\r\n          timeComplexity={this.state.timeComplexity}\r\n          pathCost={this.state.pathCost}\r\n          pathLength={this.state.pathLength}\r\n          handleDescription={(algo)=>this.getDescription(algo)}\r\n        ></Navbar>\r\n        <div className=\"labels mt-3\">\r\n          <li className=\"node startNode ml-5\"></li>  Start node\r\n          <li className=\"node endNode ml-5\"></li>  End Node\r\n          <li className=\"node node-visited ml-5\"></li>  Visited node\r\n          <li className=\"node node-shortestPath ml-5\"></li>  Path Node\r\n          <li className=\"node wall-true ml-5\"></li>  Obstacle Node\r\n          <li className=\"node weight-present ml-5\"></li>  Weight Node\r\n          <li className=\"node ml-5\"></li>  Unvisited Node\r\n        </div>\r\n\r\n        <div className=\"description mt-3\">\r\n          {this.state.description}\r\n        </div>\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={node.row}\r\n                      column={node.column}\r\n                      isStart={node.isStart}\r\n                      isEnd={node.isEnd}\r\n                      distance={node.distance}\r\n                      isVisited={node.isVisited}\r\n                      previousNode={node.previousNode}\r\n                      isWall={node.isWall}\r\n                      weight={node.weight}\r\n                      visitedNode={node.visitedNode}\r\n                      pathNode={node.pathNode}\r\n                      // isMousePressed={isMousePressed}\r\n                      onMouseDown={(row, column) =>\r\n                        this.handleMouseDown(row, column)\r\n                      }\r\n                      onMouseEnter={(row, column) =>\r\n                        this.handleMouseEnter(row, column)\r\n                      }\r\n                      onMouseUp={(row, column) =>\r\n                        this.handleMouseUp(row, column)\r\n                      }\r\n                      onMouseLeave={(row, column) =>\r\n                        this.handleMouseLeave(row,column)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphAlgoVisualizer;\r\n","import React from \"react\";\r\nimport './canvas.css'\r\nclass Canvas extends React.Component {\r\n  state = {\r\n    coord: [],\r\n    minimumCost: 0,\r\n  };\r\n\r\n  newCanvas() {\r\n    let newcoord = [];\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n    this.setState({ coord: newcoord }, function () {\r\n      this.props.draw(this.canvas, ctx, this.state.coord);\r\n    });\r\n  }\r\n\r\n  setCost(cost) {\r\n    this.setState({ minimumCost: cost });\r\n  }\r\n\r\n  prims() {\r\n    let visited = [];\r\n    let unvisited = [];\r\n    let unvisited1 = [];\r\n    let total = 0;\r\n    for (let i in this.state.coord) {\r\n      unvisited.push(this.state.coord[i]);\r\n      unvisited1.push(this.state.coord[i]);\r\n    }\r\n    let length = unvisited.length;\r\n    let first = unvisited[0];\r\n\r\n    visited.push(first);\r\n    unvisited.splice(0, 1);\r\n\r\n    while (length > 1) {\r\n      let minEdge = Infinity;\r\n      let parent = null;\r\n      let currentVertex = null;\r\n      for (let i in visited) {\r\n        for (let j in unvisited) {\r\n          let weight = this.calWeight(\r\n            visited[i][0],\r\n            visited[i][1],\r\n            unvisited[j][0],\r\n            unvisited[j][1]\r\n          );\r\n          if (minEdge > weight) {\r\n            minEdge = weight;\r\n            currentVertex = j;\r\n            parent = i;\r\n          }\r\n        }\r\n      }\r\n      minEdge = minEdge / 5;\r\n      minEdge = Math.round(minEdge);\r\n      total += minEdge;\r\n      console.log(this.state.totalCount);\r\n      this.props.drawPrims(\r\n        minEdge,\r\n        parent,\r\n        currentVertex,\r\n        visited,\r\n        unvisited,\r\n        this.canvas,\r\n        this.canvas.getContext(\"2d\")\r\n      );\r\n      visited.push(unvisited[currentVertex]);\r\n      unvisited.splice(currentVertex, 1);\r\n      length = length - 1;\r\n    }\r\n    this.setCost(total);\r\n  }\r\n  calWeight(x1, y1, x2, y2) {\r\n    let x = Math.pow(x1 - x2, 2);\r\n    let y = Math.pow(y1 - y2, 2);\r\n    return Math.sqrt(x + y);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n    this.props.outline(this.canvas, ctx);\r\n  }\r\n\r\n  render() {\r\n    let width = window.innerWidth - 45;\r\n    let height = window.innerHeight * 0.6;\r\n\r\n    return (\r\n      <div id=\"head\">\r\n        <div\r\n          className=\" pt-2 pb-2 text-light container-float\"\r\n          style={{ backgroundColor: \"#262626\" }}\r\n        >\r\n          <div className=\"navbar-brand ml-4 \">Minimum Spanning Tree</div>\r\n        </div>\r\n\r\n        <div className=\"mt-2 mt-2 d-flex justify-content-center\">\r\n          You can start drawing the MST by clicking on canvas.&nbsp;&nbsp;\r\n          <b>Left-Click</b>&nbsp;to Add |&nbsp;<b>Right-Click</b>&nbsp;to\r\n          Remove.\r\n        </div>\r\n        <div className=\"mt-2 d-flex justify-content-center\">\r\n          Generated by&nbsp;<b>Prim's Algorithm</b>&nbsp;using&nbsp;\r\n          <b>Euclidean Distances</b>&nbsp;as weights of graph\r\n        </div>\r\n        <br></br>\r\n          <div className=\"mt-2 justify-content-center\" style={{display: 'flex'}}>\r\n            <div style={{color: \"darkblue\",fontSize:\"large\"}}>\r\n            <b>{this.state.minimumCost === 0 ? \"Minimum Spanning Tree Cost is displayed here \" : \"Minimum Spanning Tree Cost : \" + this.state.minimumCost} </b> \r\n            </div>\r\n          <button\r\n            className=\"btn btn-outline-dark mr-4 pt-2\"\r\n            style={{position: 'absolute', right: '0'}}\r\n            onClick={() => {\r\n              this.newCanvas();\r\n              this.setCost(0);\r\n            }}\r\n          >\r\n            <b>Clear Canvas</b>\r\n          </button>\r\n        </div>\r\n        <br></br>\r\n        <canvas\r\n          className=\"mr-4 ml-4 mt-2 bg-light\"\r\n          onClick={(e) => {\r\n            const ctx = this.canvas.getContext(\"2d\");\r\n            let coord = [];\r\n            let xypair = [];\r\n            coord.push(e.clientX);\r\n            coord.push(e.clientY);\r\n\r\n            xypair.push(coord);\r\n\r\n            if (this.state.coord.length === 0) {\r\n              this.setState({ coord: xypair }, function () {\r\n                //->prims (prims will draw edges)\r\n                this.props.draw(this.canvas, ctx, this.state.coord);\r\n              });\r\n            } else {\r\n              let newCoord = this.state.coord;\r\n              newCoord.push(xypair[0]);\r\n              this.setState({ coord: newCoord }, function () {\r\n                this.props.draw(this.canvas, ctx, this.state.coord);\r\n                this.prims();\r\n              });\r\n            }\r\n          }}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            const ctx = this.canvas.getContext(\"2d\");\r\n            let coordX = e.clientX;\r\n            let coordY = e.clientY;\r\n            let coord = this.state.coord;\r\n\r\n            for (let i in this.state.coord) {\r\n              let isInside =\r\n                Math.sqrt(\r\n                  Math.pow(coord[i][0] - coordX, 2) +\r\n                    Math.pow(coord[i][1] - coordY, 2)\r\n                ) < 8;\r\n              if (isInside) {\r\n                coord.splice(i, 1);\r\n                break;\r\n              }\r\n            }\r\n            this.setState({ coord: coord }, function () {\r\n              this.props.draw(this.canvas, ctx, this.state.coord);\r\n              this.prims();\r\n            });\r\n          }}\r\n          ref={(node) => (this.canvas = node)}\r\n          width={width}\r\n          height={height}\r\n        />\r\n        <p>\r\n          <br></br>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\n\r\nimport Canvas from \"./canvas\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nclass MinimumSpanningTree extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ChildElement = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Canvas\r\n          width={1405}\r\n          height={500}\r\n          outline={(canvas, ctx) => {\r\n            ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n          }}\r\n          draw={(canvas, ctx, coord) => {\r\n            let rect = canvas.getBoundingClientRect();\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n            for (let i in coord) {\r\n              ctx.fillStyle = \"#1e2433\";\r\n              ctx.beginPath();\r\n              ctx.arc(\r\n                coord[i][0] - rect.left,\r\n                coord[i][1] - rect.top,\r\n                10,\r\n                0,\r\n                2 * Math.PI\r\n              );\r\n              ctx.fill();\r\n            }\r\n          }}\r\n          drawPrims={(\r\n            data1,\r\n            source,\r\n            destination,\r\n            visited,\r\n            unvisited,\r\n            canvas,\r\n            ctx\r\n          ) => {\r\n            let rect = canvas.getBoundingClientRect();\r\n            ctx.strokeStyle = \"#1e1e33\";\r\n            ctx.beginPath();\r\n            ctx.moveTo(\r\n              visited[source][0] - rect.left,\r\n              visited[source][1] - rect.top\r\n            );\r\n            let x =\r\n              visited[source][0] -\r\n              rect.left +\r\n              unvisited[destination][0] -\r\n              rect.left;\r\n            x = x / 2;\r\n            let y =\r\n              visited[source][1] -\r\n              rect.top +\r\n              unvisited[destination][1] -\r\n              rect.top;\r\n            y = y / 2;\r\n            ctx.font = \"12px Roboto sans-serif\";\r\n            ctx.lineTo(\r\n              unvisited[destination][0] - rect.left,\r\n              unvisited[destination][1] - rect.top\r\n            );\r\n            ctx.stroke();\r\n            ctx.strokeStyle = \"blue\";\r\n            ctx.strokeText(data1, x, y);\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinimumSpanningTree;\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <Nav\r\n        justify\r\n        variant=\"pills\"\r\n        defaultActiveKey=\"/gav\"\r\n        className=\"navstyle\"\r\n        style={{ backgroundColor: \"#262626\" }}\r\n      >\r\n        <Nav.Item>\r\n          <Link to=\"/gav\">\r\n            <Nav.Link href=\"/gav\" className=\"nav-link-style\">\r\n              Path Finding Visualizer\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Link to=\"/mst\">\r\n            <Nav.Link href=\"/mst\" className=\"nav-link-style\" eventKey=\"link-1\">\r\n              Minimum Spanning Tree\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Link to=\"/TopologicalSorting\">\r\n            <Nav.Link\r\n              href=\"/TopologicalSorting\"\r\n              className=\"nav-link-style\"\r\n              eventKey=\"link-2\"\r\n            >\r\n              Topological Sorting\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>\r\n        Hosted on{\" \"}\r\n        <a\r\n          href=\"https://github.com/kushgupta-official/Graph-algo-visualizer\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          GitHub\r\n        </a>\r\n        , Developed by KKK (\r\n        <a\r\n          href=\"https://www.linkedin.com/in/karanipec22/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Karan Kohli\r\n        </a>\r\n        ,{\" \"}\r\n        <a\r\n          href=\"https://www.linkedin.com/in/krishna-kumar-a4611123b/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Krishna Kumar\r\n        </a>\r\n        ,{\" \"}\r\n        <a\r\n          href=\"https://www.linkedin.com/in/kush-gupta-in/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Kush Gupta\r\n        </a>\r\n        )\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport GraphAlgoVisualizer from \"./graphAlgoVisualizer/graphAlgoVisualizer\";\r\nimport MinimumSpanningTree from \"./minimumSpanningTree/minimumSpanningTree\";\r\nimport TopologicalSorting from \"./topologicalSorting/FormInput\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes as Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass App extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <Router>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact path=\"/\" element={<GraphAlgoVisualizer />} />\r\n            <Route\r\n              exact\r\n              path=\"/Graph-Algo-Visualizer\"\r\n              element={<GraphAlgoVisualizer />}\r\n            />\r\n            <Route exact path=\"/gav\" element={<GraphAlgoVisualizer />} />\r\n            <Route exact path=\"/mst\" element={<MinimumSpanningTree />} />\r\n            <Route\r\n              exact\r\n              path=\"/TopologicalSorting\"\r\n              element={<TopologicalSorting />}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport ReactGA from \"react-ga\";\r\nReactGA.initialize(\"UA-179559461-1\");\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}